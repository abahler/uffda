"use strict";

let socket_io = require('socket.io');
let http = require('http');
let express = require('express');
let app = express();
app.use(express.static('public'));

let server = http.Server(app);  // This will allow Socket.IO to run alongside express
let io = socket_io(server);     // Create a Socket.IO server

/*
 * ENHANCEMENTS TO ADD:
 *	1. Show usernames of users who are online
 *	2. Show # of users online (easy: just do a count of list items generated by #1 above, on the client side)
 *	3. Display '{user} is typing...' notice whenever appropriate
 *
 */

let usersOnline = [];       // Keep a list of users currently online.
                            // But it's probably not best to re-send the whole list when a new connection happens.
                            // Instead, you should just send the user downstream to the client
                            // So we may not use this, but just keep here for now.

io.on('connection', (socket) => {   // A Socket.IO server is an EventEmitter, so we listen for events
    console.log('Client connected');

    socket.on('message', (message) => {
        console.log('Received message: ', message);
        // Broadcast message to all clients except the one whose socket object we're using
        socket.broadcast.emit('message', message);  
    });
    
    // Use socket id as username (for demonstration's sake). Add to list of users currently online. 
    let userID = socket.id;
    usersOnline.push(userID);   // May not use this. Keep here for now.
    
    // console.log('this: ', this);     // 'this' is an empty object
    io.emit('newUserEntered', usersOnline);  // Send message to ALL clients, including connected one
});

server.listen(process.env.PORT || 8080);    // server.listen replaces app.listen when we add in http and socket_io